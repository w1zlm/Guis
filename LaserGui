-- Made by w1zlm (roblox and youtube)
-- Discord - w1zml

local function __name__()
	local Name = ""
	for _ = 1, 10, 1 do
		Name = Name .. utf8.char(math.random(10, 1000))
	end
	return Name
end

local TS = game:GetService("TweenService")

local PlayingTweens = {
	["Buttons"] = {

	},
	["Switches"] = {

	},
	["Sliders"] = {

	},
	["Selectors"] = {

	}
}

local TweenStandarts = {
	["Button"] = {
		["TextColorChange"] = {}
	},
	["Switch"] = {
		["SwitchMovement"] = {},
		["SwitchColorChange"] = {}
	},
	["Slider"] = {
		["SliderColorChange"] = {}
	},
	["Selector"] = {
		["SelectorSizeChange"] = {},
		["SelectorArrowRotation"] = {}
	}
}

local Player = game.Players.LocalPlayer
local Mouse = Player:GetMouse()

local UIS = game:GetService("UserInputService")

local Holding = false

UIS.InputBegan:Connect(function(input)
	local inputType = input.UserInputType
	if inputType == Enum.UserInputType.MouseButton1 then
		Holding = true
	end
end)   

UIS.InputEnded:Connect(function(input)
	local inputType = input.UserInputType
	if inputType == Enum.UserInputType.MouseButton1 then
		Holding = false
	end
end)

local Camera = game.Workspace.CurrentCamera

local function FindButtonByY(Folder)
	local Y = Mouse.Y
	for _, v in pairs(Folder:GetChildren()) do
		if v:IsA("GuiButton") then
			if Y <= v.AbsolutePosition.Y + v.AbsoluteSize.Y and Y >= v.AbsolutePosition.Y then
				return v
			end
		end
	end
	return nil
end

local function new(MainColor : Color3, Saturation : number, DisabledSaturation : number)
	if MainColor == nil then
		MainColor = Color3.new(1, 0, 0)
	end
	if Saturation == nil then
		Saturation = 1
	end
	if DisabledSaturation == nil then
		DisabledSaturation = Saturation
	end
	
	local color1 = Color3.new(MainColor.R / (1.75 / Saturation), MainColor.G / (1.75 / Saturation), MainColor.B / (1.75 / Saturation))
	local color2 = Color3.new(MainColor.R / (1.53 / Saturation), MainColor.G / (1.53 / Saturation), MainColor.B / (1.53 / Saturation))
	local color3 = Color3.new(MainColor.R * Saturation, MainColor.G * Saturation, MainColor.B * Saturation)
	local midColor = (MainColor.R * DisabledSaturation + MainColor.G * DisabledSaturation + MainColor.B * DisabledSaturation) / 3
	local color4 = Color3.new(midColor / (5 / DisabledSaturation), midColor / (5 / DisabledSaturation), midColor / (5 / DisabledSaturation))
	
	local Gui = Instance.new("ScreenGui", game.Players.LocalPlayer.PlayerGui)
	Gui.Name = __name__()

	local Frame = Instance.new("Frame", Gui)
	Frame.Name = "Frame"
	Frame.AnchorPoint = Vector2.new(0.5, 0.5)
	Frame.BackgroundTransparency = 1
	Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
	Frame.Size = UDim2.new(0.5, 0, 0.5, 0)

	local BorderDW = Instance.new("Frame", Frame)
	BorderDW.Name = "Border dw"
	BorderDW.AnchorPoint = Vector2.new(0, 1)
	BorderDW.BackgroundTransparency = 0
	BorderDW.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	BorderDW.BorderColor3 = Color3.fromRGB(0, 0, 0)
	BorderDW.BorderMode = Enum.BorderMode.Outline
	BorderDW.BorderSizePixel = 1
	BorderDW.Position = UDim2.new(0, 0, 1, 0)
	BorderDW.Size = UDim2.new(1, 0, 0, 5)

	local BorderDW2 = Instance.new("Frame", Frame)
	BorderDW2.Name = "Border dw 2"
	BorderDW2.AnchorPoint = Vector2.new(0, 1)
	BorderDW2.BackgroundTransparency = 0
	BorderDW2.BackgroundColor3 = color1
	BorderDW2.BorderColor3 = color1
	BorderDW2.BorderMode = Enum.BorderMode.Outline
	BorderDW2.BorderSizePixel = 1
	BorderDW2.Position = UDim2.new(0, 0, 1, -10)
	BorderDW2.Size = UDim2.new(1, 0, 0, 2)

	local BorderUP = Instance.new("Frame", Frame)
	BorderUP.Name = "Border up"
	BorderUP.AnchorPoint = Vector2.new(0, 0)
	BorderUP.BackgroundTransparency = 0
	BorderUP.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	BorderUP.BorderColor3 = Color3.fromRGB(0, 0, 0)
	BorderUP.BorderMode = Enum.BorderMode.Outline
	BorderUP.BorderSizePixel = 1
	BorderUP.Position = UDim2.new(0, 0, 0, 0)
	BorderUP.Size = UDim2.new(1, 0, 0, 5)

	local BorderUP2 = Instance.new("Frame", Frame)
	BorderUP2.Name = "Border up 2"
	BorderUP2.AnchorPoint = Vector2.new(0, 0)
	BorderUP2.BackgroundTransparency = 0
	BorderUP2.BackgroundColor3 = color1
	BorderUP2.BorderColor3 = color1
	BorderUP2.BorderMode = Enum.BorderMode.Outline
	BorderUP2.BorderSizePixel = 1
	BorderUP2.Position = UDim2.new(0, 0, 0, 10)
	BorderUP2.Size = UDim2.new(1, 0, 0, 2)

	local Menu = Instance.new("Frame", Frame)
	Menu.Name = "Menu"
	Menu.AnchorPoint = Vector2.new(0, 0)
	Menu.BackgroundTransparency = 0.5
	Menu.BackgroundColor3 = Color3.fromRGB(21, 19, 19)
	Menu.BorderColor3 = Color3.fromRGB(21, 19, 19)
	Menu.BorderMode = Enum.BorderMode.Outline
	Menu.BorderSizePixel = 1
	Menu.Position = UDim2.new(0, 0, 0, 20)
	Menu.Size = UDim2.new(1, 0, 1, -40)

	local Border = Instance.new("Frame", Menu)
	Border.Name = "Border"
	Border.AnchorPoint = Vector2.new(0, 0)
	Border.BackgroundTransparency = 0
	Border.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	Border.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Border.BorderMode = Enum.BorderMode.Outline
	Border.BorderSizePixel = 1
	Border.Position = UDim2.new(0.25, 0, 0, 0)
	Border.Size = UDim2.new(0, 3, 1, 0)

	local Frame2 = Instance.new("Frame", Menu)
	Frame2.Name = "Frame2"
	Frame2.AnchorPoint = Vector2.new(0, 0)
	Frame2.BackgroundTransparency = 1
	Frame2.BorderMode = Enum.BorderMode.Outline
	Frame2.BorderSizePixel = 0
	Frame2.Position = UDim2.new(0, 0, 0, 0)
	Frame2.Size = UDim2.new(0.25, 0, 1, 0)

	local Menus = Instance.new("Frame", Menu)
	Menus.Name = "Menus"
	Menus.AnchorPoint = Vector2.new(0, 0)
	Menus.BackgroundTransparency = 1
	Menus.BorderMode = Enum.BorderMode.Outline
	Menus.BorderSizePixel = 1
	Menus.Position = UDim2.new(0.25, 4, 0, 0)
	Menus.Size = UDim2.new(0.75, -4, 1, 0)

	local Sections = Instance.new("ScrollingFrame", Menu)
	Sections.Name = "Sections"
	Sections.AnchorPoint = Vector2.new(0, 0)
	Sections.BackgroundTransparency = 1
	Sections.BorderMode = Enum.BorderMode.Outline
	Sections.BorderSizePixel = 0
	Sections.Position = UDim2.new(0, 0, 0, 0)
	Sections.Size = UDim2.new(0.25, 0, 1, 0)
	Sections.CanvasSize = UDim2.new(0, 0, 1, 0)
	Sections.CanvasPosition = Vector2.new(0, 0)

	local UIGL = Instance.new("UIGridLayout", Sections)
	UIGL.FillDirection = Enum.FillDirection.Horizontal
	UIGL.FillDirectionMaxCells = 0
	UIGL.HorizontalAlignment = Enum.HorizontalAlignment.Right
	UIGL.SortOrder = Enum.SortOrder.LayoutOrder
	UIGL.StartCorner = Enum.StartCorner.TopLeft
	UIGL.VerticalAlignment = Enum.VerticalAlignment.Top
	UIGL.CellPadding = UDim2.new(0, 5, 0, 5)
	UIGL.CellSize = UDim2.new(1, 0, 0, 50)

	local Functions = {
		["NewSection"] = nil
	}

	Functions["NewSection"] = function(Name)
		local Section = Instance.new("TextButton", Sections)
		Section.Name = Name
		Section.BackgroundColor3 = Color3.fromRGB(43, 41, 47)
		Section.BorderColor3 = Color3.fromRGB(43, 41, 47)
		Section.BorderMode = Enum.BorderMode.Inset
		Section.BorderSizePixel = 5
		Section.FontFace = Font.new("rbxasset://fonts/families/ComicNeueAngular.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
		Section.TextColor3 = color3
		Section.Text = Name
		Section.TextScaled = true
		Section.TextSize = 25
		Section.TextStrokeColor3 = color3
		Section.TextStrokeTransparency = 1

		local UITSC = Instance.new("UITextSizeConstraint", Section)
		UITSC.MaxTextSize = 25
		UITSC.MinTextSize = 1

		Section.MouseButton1Down:Connect(function()
			for i, v in pairs(Menus:GetChildren()) do
				if v.Name ~= Name then
					v.Visible = false
				else
					v.Visible = true
				end
			end
		end)

		local NewMenu = Instance.new("ScrollingFrame", Menus)
		NewMenu.Name = Name
		NewMenu.AnchorPoint = Vector2.new(0, 0)
		NewMenu.BackgroundTransparency = 1
		NewMenu.Position = UDim2.new(0, 0, 0, 0)
		NewMenu.Size = UDim2.new(1, 0, 1, 0)
		NewMenu.CanvasPosition = Vector2.new(0, 0)
		NewMenu.CanvasSize = UDim2.new(0, 0, 1, 0)

		local UILL = Instance.new("UIListLayout", NewMenu)
		UILL.Padding = UDim.new(0, 5)
		
		local LastTab
		local TabAmount = 0
		local PreLastTab
		
		local LastTabSelector
		local PreLastTabSelector
		
		coroutine.wrap(function()
			local Parent = NewMenu
			local UILL1 = UILL

			while game:GetService("RunService").RenderStepped:wait() do
				local EndYSize = UILL1.AbsoluteContentSize.Y + UILL1.Padding.Offset
				
				if LastTabSelector then
					local SelectedFrame = LastTabSelector.SelectedFrame
					local ScrollingFrame = SelectedFrame.ScrollingFrame
					
					local EndResult = (LastTab.AbsolutePosition.Y + LastTab.UIListLayout.AbsoluteContentSize.Y) - (SelectedFrame.AbsolutePosition.Y + SelectedFrame.AbsoluteSize.Y)
					EndResult = math.max(0, ScrollingFrame.AbsoluteSize.Y - EndResult)
					
					EndYSize = EndYSize + EndResult
				elseif PreLastTabSelector then
					local ScrollingFrame = PreLastTabSelector.SelectedFrame.ScrollingFrame
					EndYSize = EndYSize + math.max(0, ScrollingFrame.AbsoluteSize.Y - (LastTab.AbsoluteSize.Y + UILL.Padding.Offset * 2))
				end
				
				Parent.CanvasSize = UDim2.new(0, 0, 0, EndYSize)
			end
		end)()

		local Functions = {
			["NewTab"] = nil
		}

		Functions["NewTab"] = function(Name)
			
			local NewTab = Instance.new("Frame", NewMenu)
			NewTab.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
			NewTab.BackgroundTransparency = 0.7
			NewTab.BorderSizePixel = 0
			NewTab.Size = UDim2.new(1, 0, 0, 100)
			
			PreLastTab = LastTab
			LastTab = NewTab
			PreLastTabSelector = LastTabSelector
			LastTabSelector = nil

			local UILL = Instance.new("UIListLayout", NewTab)
			UILL.Padding = UDim.new(0, 5)
			UILL.SortOrder = Enum.SortOrder.LayoutOrder
			UILL.Name = "UIListLayout"
			
			local NameLabel = Instance.new("TextLabel", NewTab)
			NameLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
			NameLabel.BackgroundTransparency = 0.4
			NameLabel.BorderSizePixel = 0
			NameLabel.Size = UDim2.new(1, 0, 0, 40)
			NameLabel.Text = Name
			NameLabel.FontFace = Font.new("rbxasset://fonts/families/ComicNeueAngular.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
			NameLabel.TextColor3 = color3
			NameLabel.TextScaled = true
			NameLabel.TextStrokeColor3 = color3

			local UITSC = Instance.new("UITextSizeConstraint", NameLabel)
			UITSC.MaxTextSize = 25
			UITSC.MinTextSize = 1

			coroutine.wrap(function()
				local Parent = NewTab
				local UILL1 = UILL
				
				while game:GetService("RunService").RenderStepped:wait() do
					Parent.Size = UDim2.new(1, 0, 0, UILL1.AbsoluteContentSize.Y + UILL1.Padding.Offset)
				end
			end)()

			local Functions = {
				["AddButton"] = nil,
				["AddSwitch"] = nil,
				["AddSlider"] = nil,
				["AddSelector"] = nil,
				["AddText"] = nil
			}

			Functions["AddButton"] = function(Text, Func)
				local ButtonId = #PlayingTweens["Buttons"] + 1
				PlayingTweens["Buttons"][ButtonId] = {
					["TextColorChange"] = {}
				}

				local Properties = {
					["Disabled"] = false,
					["_coroutineFuncCall"] = true
				}

				local Button = Instance.new("TextButton", NewTab)
				Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				Button.BackgroundTransparency = 0.7
				Button.BorderMode = Enum.BorderMode.Inset
				Button.BorderSizePixel = 5
				Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Button.Size = UDim2.new(1, 0, 0, 50)
				Button.FontFace = Font.new("rbxasset://fonts/families/ComicNeueAngular.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
				Button.Text = Text
				Button.TextColor3 = color2
				Button.TextScaled = true
				Button.TextStrokeColor3 = color2

				local UITSC = Instance.new("UITextSizeConstraint", Button)
				UITSC.MaxTextSize = 25
				UITSC.MinTextSize = 1

				local function OnClicked()
					if not Properties.Disabled then
						if Properties["_coroutineFuncCall"] then
							coroutine.wrap(Func)(Properties)
						else
							Func(Properties)
						end
					end
				end

				coroutine.wrap(function()
					local LastValue = false

					while game:GetService("RunService").RenderStepped:wait() do

						if LastValue ~= Properties.Disabled then
							LastValue = Properties.Disabled

							if Properties.Disabled then
								Button.AutoButtonColor = false
								Button.Active = false

								local Tween = TS:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {TextColor3 = color4})

								for i, v in pairs(PlayingTweens["Buttons"][ButtonId]["TextColorChange"]) do
									v:Pause()
									table.remove(PlayingTweens["Buttons"][ButtonId]["TextColorChange"], i)
								end

								PlayingTweens["Buttons"][ButtonId]["TextColorChange"][#PlayingTweens["Buttons"][ButtonId]["TextColorChange"] + 1] = Tween

								Tween:Play()

								coroutine.wrap(function()
									wait(0.5)

									for i, v in pairs(PlayingTweens["Buttons"][ButtonId]["TextColorChange"]) do
										if v == Tween then
											table.remove(PlayingTweens["Buttons"][ButtonId]["TextColorChange"], i)
										end
									end
								end)()
							else
								Button.AutoButtonColor = true
								Button.Active = true

								local Tween = TS:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {TextColor3 = color2})

								for i, v in pairs(PlayingTweens["Buttons"][ButtonId]["TextColorChange"]) do
									v:Pause()
									table.remove(PlayingTweens["Buttons"][ButtonId]["TextColorChange"], i)
								end

								PlayingTweens["Buttons"][ButtonId]["TextColorChange"][#PlayingTweens["Buttons"][ButtonId]["TextColorChange"] + 1] = Tween

								Tween:Play()

								coroutine.wrap(function()
									wait(0.5)

									for i, v in pairs(PlayingTweens["Buttons"][ButtonId]["TextColorChange"]) do
										if v == Tween then
											table.remove(PlayingTweens["Buttons"][ButtonId]["TextColorChange"], i)
										end
									end
								end)()
							end
						end
					end
				end)()

				Button.MouseButton1Down:Connect(OnClicked)

				return Properties
			end

			Functions["AddSwitch"] = function(Text, FuncOff, FuncOn)
				local SwitchID = #PlayingTweens["Switches"] + 1
				PlayingTweens["Switches"][SwitchID] = {
					["SwitchMovement"] = {},
					["SwitchColorChange"] = {}
				}

				local Switch = Instance.new("Frame", NewTab)
				Switch.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				Switch.BackgroundTransparency = 0.7
				Switch.BorderSizePixel = 0
				Switch.Size = UDim2.new(1, 0, 0, 50)

				local SwitchFrame = Instance.new("Frame", Switch)
				SwitchFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				SwitchFrame.BackgroundTransparency = 0.7
				SwitchFrame.BorderSizePixel = 2
				SwitchFrame.Size = UDim2.new(0.2, 0, 0.75, 0)
				SwitchFrame.Position = UDim2.new(1, -20, 0.5, 0)
				SwitchFrame.BorderColor3 = color1
				SwitchFrame.AnchorPoint = Vector2.new(1, 0.5)

				local Button = Instance.new("TextButton", SwitchFrame)
				Button.BackgroundColor3 = color1
				Button.BackgroundTransparency = 0
				Button.BorderSizePixel = 0
				Button.Size = UDim2.new(0.4, 0, 0.75, 0)
				Button.Position = UDim2.new(0.05, 0, 0.5, 0)
				Button.AnchorPoint = Vector2.new(0, 0.5)
				Button.Text = ""

				local TextLabel = Instance.new("TextLabel", Switch)
				TextLabel.AnchorPoint = Vector2.new(0, 0.5)
				TextLabel.BackgroundTransparency = 1
				TextLabel.BorderMode = Enum.BorderMode.Inset
				TextLabel.BorderSizePixel = 5
				TextLabel.Size = UDim2.new(0.3, 0, 1, 0)
				TextLabel.Position = UDim2.new(0, 0, 0.5, 0)
				TextLabel.TextXAlignment = Enum.TextXAlignment.Left
				TextLabel.Text = Text
				TextLabel.FontFace = Font.new("rbxasset://fonts/families/ComicNeueAngular.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
				TextLabel.TextColor3 = color2
				TextLabel.TextScaled = true

				local UITSC = Instance.new("UITextSizeConstraint", TextLabel)
				UITSC.MaxTextSize = 25
				UITSC.MinTextSize = 1

				local Properties = {
					["Toggled"] = false,
					["AllowedToToggle"] = true,
					["_coroutineFuncCall"] = true,
					["_coroutineFuncOffCall"] = true,
					["_coroutineFuncOnCall"] = true
				}

				coroutine.wrap(function()
					local LastValue = true
					local LastValue2 = true

					while game:GetService("RunService").RenderStepped:wait() do
						if LastValue ~= Properties.AllowedToToggle then
							LastValue = Properties.AllowedToToggle

							if Properties.AllowedToToggle then

								Button.AutoButtonColor = true
								Button.Active = true
								local PropertyTable = {
									["BackgroundColor3"] = nil
								}

								if Properties.Toggled then
									PropertyTable.BackgroundColor3 = Color3.fromRGB(0, 145, 0)
								else
									PropertyTable.BackgroundColor3 = color1
								end

								local Tween = TS:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), PropertyTable)

								for i, v in pairs(PlayingTweens["Switches"][SwitchID]["SwitchColorChange"]) do
									v:Pause()
									table.remove(PlayingTweens["Switches"][SwitchID]["SwitchColorChange"], i)
								end

								PlayingTweens["Switches"][SwitchID]["SwitchColorChange"][#PlayingTweens["Switches"][SwitchID]["SwitchColorChange"] + 1] = Tween

								Tween:Play()

								coroutine.wrap(function()
									wait(0.5)

									for i, v in pairs(PlayingTweens["Switches"][SwitchID]["SwitchColorChange"]) do
										if v == Tween then
											table.remove(PlayingTweens["Switches"][SwitchID]["SwitchColorChange"], i)
										end
									end
								end)()
							else
								Button.AutoButtonColor = false
								Button.Active = false

								local Tween = TS:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundColor3 = color4})

								for i, v in pairs(PlayingTweens["Switches"][SwitchID]["SwitchColorChange"]) do
									v:Pause()
									table.remove(PlayingTweens["Switches"][SwitchID]["SwitchColorChange"], i)
								end

								PlayingTweens["Switches"][SwitchID]["SwitchColorChange"][#PlayingTweens["Switches"][SwitchID]["SwitchColorChange"] + 1] = Tween

								Tween:Play()

								coroutine.wrap(function()
									wait(0.5)

									for i, v in pairs(PlayingTweens["Switches"][SwitchID]["SwitchColorChange"]) do
										if v == Tween then
											table.remove(PlayingTweens["Switches"][SwitchID]["SwitchColorChange"], i)
										end
									end
								end)()
							end
						end

						if LastValue2 ~= Properties["_coroutineFuncCall"] then
							LastValue2 = Properties["_coroutineFuncCall"]

							Properties["_coroutineFuncOffCall"] = Properties["_coroutineFuncCall"]
							Properties["_coroutineFuncOnCall"] = Properties["_coroutineFuncCall"]
						end
					end
				end)()

				local LastValue = Properties.Toggled

				local function OnPressedOrChange(arg1)
					if Properties.AllowedToToggle == true then
						if Properties.Toggled == false then
							local Tween

							if arg1 == "Changed" then
								Tween = TS:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {AnchorPoint = Vector2.new(0, 0.5), Position = UDim2.new(0.05, 0, 0.5, 0), BackgroundColor3 = color1})
							else
								Tween = TS:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {AnchorPoint = Vector2.new(1, 0.5), Position = UDim2.new(0.95, 0, 0.5, 0), BackgroundColor3 = Color3.fromRGB(0, 145, 0)})
							end

							for i, v in pairs(PlayingTweens["Switches"][SwitchID]["SwitchMovement"]) do
								v:Pause()
								table.remove(PlayingTweens["Switches"][SwitchID]["SwitchMovement"], i)
							end

							PlayingTweens["Switches"][SwitchID]["SwitchMovement"][#PlayingTweens["Switches"][SwitchID]["SwitchMovement"] + 1] = Tween

							Tween:Play()

							if arg1 ~= "Changed" then
								LastValue = true
								Properties.Toggled = true
							end

							if arg1 == "Changed" then
								if Properties["_coroutineFuncOffCall"] then
									coroutine.wrap(FuncOff)(Properties)
								else
									FuncOff(Properties)
								end
							else
								if Properties["_coroutineFuncOnCall"] then
									coroutine.wrap(FuncOn)(Properties)
								else
									FuncOn(Properties)
								end
							end

							coroutine.wrap(function()
								wait(0.5)

								for i, v in pairs(PlayingTweens["Switches"][SwitchID]["SwitchMovement"]) do
									if v == Tween then
										table.remove(PlayingTweens["Switches"][SwitchID]["SwitchMovement"], i)
									end
								end
							end)()
						else
							local Tween

							if arg1 == "Changed" then
								Tween = TS:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {AnchorPoint = Vector2.new(1, 0.5), Position = UDim2.new(0.95, 0, 0.5, 0), BackgroundColor3 = Color3.fromRGB(0, 145, 0)})
							else
								Tween = TS:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {AnchorPoint = Vector2.new(0, 0.5), Position = UDim2.new(0.05, 0, 0.5, 0), BackgroundColor3 = color1})
							end

							for i, v in pairs(PlayingTweens["Switches"][SwitchID]["SwitchMovement"]) do
								v:Pause()
								table.remove(PlayingTweens["Switches"][SwitchID]["SwitchMovement"], i)
							end

							PlayingTweens["Switches"][SwitchID]["SwitchMovement"][#PlayingTweens["Switches"][SwitchID]["SwitchMovement"] + 1] = Tween

							Tween:Play()

							if arg1 ~= "Changed" then
								LastValue = false
								Properties.Toggled = false
							end

							if arg1 == "Changed" then
								if Properties["_coroutineFuncOffCall"] then
									coroutine.wrap(FuncOn)(Properties)
								else
									FuncOn(Properties)
								end
							else
								if Properties["_coroutineFuncOnCall"] then
									coroutine.wrap(FuncOff)(Properties)
								else
									FuncOff(Properties)
								end
							end

							coroutine.wrap(function()
								wait(0.5)

								for i, v in pairs(PlayingTweens["Switches"][SwitchID]["SwitchMovement"]) do
									if v == Tween then
										table.remove(PlayingTweens["Switches"][SwitchID]["SwitchMovement"], i)
									end
								end
							end)()
						end
					end
				end

				Button.MouseButton1Down:Connect(OnPressedOrChange)

				coroutine.wrap(function()
					while game:GetService("RunService").RenderStepped:wait() do
						if Properties.Toggled ~= LastValue then
							LastValue = Properties.Toggled
							Properties.Toggled = Properties.Toggled

							OnPressedOrChange("Changed")
						end
					end
				end)()

				return Properties

			end

			Functions["AddSlider"] = function(Text, FuncOnChange)
				local SliderID = #PlayingTweens["Sliders"] + 1
				PlayingTweens["Sliders"][SliderID] = {
					["SliderColorChange"] = {}
				}

				local Slider = Instance.new("Frame", NewTab)
				Slider.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				Slider.BackgroundTransparency = 0.7
				Slider.BorderSizePixel = 0
				Slider.Size = UDim2.new(1, 0, 0, 50)

				local SliderFrame = Instance.new("Frame", Slider)
				SliderFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				SliderFrame.BackgroundTransparency = 0.7
				SliderFrame.BorderSizePixel = 2
				SliderFrame.Size = UDim2.new(0.8, 0, 0.1, 0)
				SliderFrame.Position = UDim2.new(0.5, 0, 0.8, 0)
				SliderFrame.BorderColor3 = color1
				SliderFrame.AnchorPoint = Vector2.new(0.5, 0.5)

				local Button = Instance.new("TextButton", SliderFrame)
				Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				Button.BackgroundTransparency = 0
				Button.BorderSizePixel = 2
				Button.BorderColor3 = color1
				Button.Size = UDim2.new(0.058, 0, 5, 0)
				Button.Position = UDim2.new(0, 0, 0.5, 0)
				Button.AnchorPoint = Vector2.new(0.5, 0.5)
				Button.Text = ""

				local UISC = Instance.new("UISizeConstraint", Button)
				UISC.MaxSize = Vector2.new(20, 20)
				UISC.MinSize = Vector2.new(0, 0)

				local NameLabel = Instance.new("TextLabel", Slider)
				NameLabel.AnchorPoint = Vector2.new(0.5, 0.5)
				NameLabel.BackgroundTransparency = 1
				NameLabel.BorderMode = Enum.BorderMode.Inset
				NameLabel.BorderSizePixel = 5
				NameLabel.Size = UDim2.new(0, 100, 0, 50)
				NameLabel.Position = UDim2.new(0.2, 0, 0.3, 0)
				NameLabel.Text = Text
				NameLabel.FontFace = Font.new("rbxasset://fonts/families/ComicNeueAngular.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
				NameLabel.TextColor3 = color2
				NameLabel.TextScaled = true

				local UITSC = Instance.new("UITextSizeConstraint", NameLabel)
				UITSC.MaxTextSize = 25
				UITSC.MinTextSize = 1

				local ValueLabel = Instance.new("TextLabel", Slider)
				ValueLabel.AnchorPoint = Vector2.new(0.5, 0.5)
				ValueLabel.BackgroundTransparency = 1
				ValueLabel.BorderMode = Enum.BorderMode.Inset
				ValueLabel.BorderSizePixel = 5
				ValueLabel.Size = UDim2.new(0, 100, 0, 50)
				ValueLabel.Position = UDim2.new(0.8, 0, 0.3, 0)
				ValueLabel.Text = "0"
				ValueLabel.FontFace = Font.new("rbxasset://fonts/families/ComicNeueAngular.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
				ValueLabel.TextColor3 = color2
				ValueLabel.TextScaled = true

				local UITSC = Instance.new("UITextSizeConstraint", ValueLabel)
				UITSC.MaxTextSize = 25
				UITSC.MinTextSize = 1

				local Properties = {
					["MinValue"] = 0,
					["MaxValue"] = 100,
					["CanSlide"] = true,
					["Value"] = 0,
					["_coroutineFuncCall"] = true	
				}

				local Per1Value = (Properties.MaxValue - Properties.MinValue) / SliderFrame.AbsoluteSize.X
				local Per1Value2 = SliderFrame.AbsoluteSize.X / (Properties.MaxValue - Properties.MinValue)

				local IsButtonHolding = false

				local function OnPressed()
					IsButtonHolding = true

					while game:GetService("RunService").RenderStepped:wait() do
						if not Holding or not Properties.CanSlide then
							IsButtonHolding = false
							break
						end

						local ScaleXPos = SliderFrame.AbsolutePosition.X
						local ScaleXSize = SliderFrame.AbsoluteSize.X

						local NewPosX = Mouse.X - ScaleXPos

						if NewPosX < 0 then
							NewPosX = 0
						elseif NewPosX > ScaleXSize then
							NewPosX = ScaleXSize
						end

						Button.Position = UDim2.new(0, NewPosX, 0.5, 0)

						local Value = math.floor(NewPosX * Per1Value + 0.5)

						ValueLabel.Text = tostring(Properties.MinValue + Value)
						Properties.Value = Value
					end
				end

				Button.MouseButton1Down:Connect(OnPressed)

				coroutine.wrap(function()
					local LastValue = true
					local LastValue2 = 0
					local LastValue3, LastValue4 = 0, 100

					while game:GetService("RunService").RenderStepped:wait() do
						if LastValue ~= Properties.CanSlide then
							LastValue = Properties.CanSlide

							if not Properties.CanSlide then
								Button.AutoButtonColor = false
								Button.Active = false

								local Tween = TS:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BorderColor3 = color4})
								local Tween2 = TS:Create(SliderFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BorderColor3 = color4})

								for i, v in pairs(PlayingTweens["Sliders"][SliderID]["SliderColorChange"]) do
									v:Pause()
									table.remove(PlayingTweens["Sliders"][SliderID]["SliderColorChange"], i)
								end

								PlayingTweens["Sliders"][SliderID]["SliderColorChange"][#PlayingTweens["Sliders"][SliderID]["SliderColorChange"] + 1] = Tween
								PlayingTweens["Sliders"][SliderID]["SliderColorChange"][#PlayingTweens["Sliders"][SliderID]["SliderColorChange"] + 1] = Tween2

								Tween:Play()
								Tween2:Play()

								coroutine.wrap(function()
									wait(0.5)

									for i, v in pairs(PlayingTweens["Sliders"][SliderID]["SliderColorChange"]) do
										if v == Tween or v == Tween2 then
											table.remove(PlayingTweens["Sliders"][SliderID]["SliderColorChange"], i)
										end
									end
								end)()
							else
								Button.AutoButtonColor = true
								Button.Active = true

								local Tween = TS:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BorderColor3 = color1})
								local Tween2 = TS:Create(SliderFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BorderColor3 = color1})


								for i, v in pairs(PlayingTweens["Sliders"][SliderID]["SliderColorChange"]) do
									v:Pause()
									table.remove(PlayingTweens["Sliders"][SliderID]["SliderColorChange"], i)
								end

								PlayingTweens["Sliders"][SliderID]["SliderColorChange"][#PlayingTweens["Sliders"][SliderID]["SliderColorChange"] + 1] = Tween
								PlayingTweens["Sliders"][SliderID]["SliderColorChange"][#PlayingTweens["Sliders"][SliderID]["SliderColorChange"] + 1] = Tween2

								Tween:Play()
								Tween2:Play()

								coroutine.wrap(function()
									wait(0.5)

									for i, v in pairs(PlayingTweens["Sliders"][SliderID]["SliderColorChange"]) do
										if v == Tween or v == Tween2 then
											table.remove(PlayingTweens["Sliders"][SliderID]["SliderColorChange"], i)
										end
									end
								end)()
							end
						end

						if LastValue2 ~= Properties.Value then
							LastValue2 = Properties.Value

							local TrueValue = math.floor(Button.Position.X.Offset * Per1Value + 0.5)

							local NeedToChange = math.abs(TrueValue - Properties.Value) > (Properties.MaxValue - Properties.MinValue) / 20 and not IsButtonHolding

							if NeedToChange then
								Button.Position = UDim2.new(0, math.floor(Properties.Value * Per1Value2 + 0.5), 0.5, 0)
								ValueLabel.Text = tostring(Properties.MinValue + Properties.Value)
							end

							if Properties["_coroutineFuncCall"] then
								coroutine.wrap(FuncOnChange)(Properties, Properties.Value)
							else
								FuncOnChange(Properties, Properties.Value)
							end
						end

						if LastValue3 ~= Properties.MinValue then
							LastValue3 = Properties.MinValue

							Per1Value = (Properties.MaxValue - Properties.MinValue) / SliderFrame.AbsoluteSize.X
							Per1Value2 = SliderFrame.AbsoluteSize.X / (Properties.MaxValue - Properties.MinValue)

							local Value = math.floor(Button.Position.X.Offset * Per1Value + 0.5)

							ValueLabel.Text = tostring(Properties.MinValue + Value)
							Properties.Value = Value
						end

						if LastValue4 ~= Properties.MaxValue then
							LastValue4 = Properties.MaxValue

							Per1Value = (Properties.MaxValue - Properties.MinValue) / SliderFrame.AbsoluteSize.X
							Per1Value2 = SliderFrame.AbsoluteSize.X / (Properties.MaxValue - Properties.MinValue)

							local Value = math.floor(Button.Position.X.Offset * Per1Value + 0.5)

							ValueLabel.Text = tostring(Properties.MinValue + Value)
							Properties.Value = Value
						end
					end
				end)()

				return Properties
			end

			Functions["AddSelector"] = function(Text, FuncOnChoiced)
				local SelectorID = #PlayingTweens["Selectors"] + 1
				PlayingTweens["Selectors"][SelectorID] = {
					["SelectorSizeChange"] = {},
					["SelectorArrowRotation"] = {},
					["SelectorColorChange"] = {},
				}
				
				local Selector = Instance.new("Frame", NewTab)
				Selector.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				Selector.BackgroundTransparency = 0.7
				Selector.BorderSizePixel = 0
				Selector.Size = UDim2.new(1, 0, 0, 50)
				
				if LastTab == NewTab then
					LastTabSelector = Selector
				end

				local SelectedFrame = Instance.new("Frame", Selector)
				SelectedFrame.AnchorPoint = Vector2.new(1, 0.5)
				SelectedFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				SelectedFrame.BorderColor3 = color1
				SelectedFrame.BorderSizePixel = 2
				SelectedFrame.BackgroundTransparency = 0.7
				SelectedFrame.Position = UDim2.new(1, -20, 0.5, 0)
				SelectedFrame.Size = UDim2.new(0.5, -20, 0.75, 0)
				SelectedFrame.Name = "SelectedFrame"

				local TextLabel = Instance.new("TextLabel", Selector)
				TextLabel.AnchorPoint = Vector2.new(0, 0.5)
				TextLabel.BackgroundTransparency = 1
				TextLabel.BorderMode = Enum.BorderMode.Inset
				TextLabel.BorderSizePixel = 5
				TextLabel.Size = UDim2.new(0.3, 0, 1, 0)
				TextLabel.Position = UDim2.new(0, 0, 0.5, 0)
				TextLabel.Text = Text
				TextLabel.FontFace = Font.new("rbxasset://fonts/families/ComicNeueAngular.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
				TextLabel.TextColor3 = color2
				TextLabel.TextScaled = true
				TextLabel.TextXAlignment = Enum.TextXAlignment.Left

				local UITSC = Instance.new("UITextSizeConstraint", TextLabel)
				UITSC.MaxTextSize = 25
				UITSC.MinTextSize = 1

				local ScrollingFrame = Instance.new("ScrollingFrame", SelectedFrame)
				ScrollingFrame.AnchorPoint = Vector2.new(1, 0)
				ScrollingFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				ScrollingFrame.BorderColor3 = color1
				ScrollingFrame.BorderSizePixel = 2
				ScrollingFrame.BackgroundTransparency = 0.7
				ScrollingFrame.Position = UDim2.new(1, 0, 1, 2)
				ScrollingFrame.Size = UDim2.new(1, 0, 0, 0)
				ScrollingFrame.Name = "ScrollingFrame"
				ScrollingFrame.ZIndex = 2
				ScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

				local ImageLabel = Instance.new("ImageLabel", SelectedFrame)
				ImageLabel.AnchorPoint = Vector2.new(1, 0.5)
				ImageLabel.BackgroundTransparency = 1
				ImageLabel.Position = UDim2.new(1, -10, 0.5, 0)
				ImageLabel.Size = UDim2.new(0, 20, 0, 20)
				ImageLabel.ImageColor3 = color2
				ImageLabel.Image = "http://www.roblox.com/asset/?id=6720842701"

				local ImageLabel2 = Instance.new("ImageLabel", ImageLabel)
				ImageLabel2.AnchorPoint = Vector2.new(0.5, 0.5)
				ImageLabel2.BackgroundTransparency = 1
				ImageLabel2.Position = UDim2.new(0.5, -1, 0.5, 0)
				ImageLabel2.Size = UDim2.new(0, 15, 0, 15)
				ImageLabel2.ImageColor3 = Color3.fromRGB(0, 0, 0)
				ImageLabel2.Image = "http://www.roblox.com/asset/?id=6720842701"

				local SelectedText = Instance.new("TextLabel", SelectedFrame)
				SelectedText.AnchorPoint = Vector2.new(0, 0.5)
				SelectedText.BackgroundTransparency = 1
				SelectedText.BorderMode = Enum.BorderMode.Inset
				SelectedText.BorderSizePixel = 5
				SelectedText.Position = UDim2.new(0, 0, 0.5, 0)
				SelectedText.Size = UDim2.new(1, -40, 1, 0)
				SelectedText.FontFace = Font.new("rbxasset://fonts/families/ComicNeueAngular.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
				SelectedText.TextColor3 = color2
				SelectedText.TextScaled = true
				SelectedText.TextXAlignment = Enum.TextXAlignment.Left
				SelectedText.Text = "None"

				local UITSC = Instance.new("UITextSizeConstraint", SelectedText)
				UITSC.MaxTextSize = 25
				UITSC.MinTextSize = 1

				local UILL = Instance.new("UIListLayout", ScrollingFrame)
				UILL.Padding = UDim.new(0, 0)
				UILL.FillDirection = Enum.FillDirection.Vertical
				UILL.HorizontalAlignment = Enum.HorizontalAlignment.Left
				UILL.SortOrder = Enum.SortOrder.LayoutOrder
				UILL.VerticalAlignment = Enum.VerticalAlignment.Top

				local Button1 = Instance.new("TextButton", SelectedFrame)
				Button1.AnchorPoint = Vector2.new(1, 0.5)
				Button1.BackgroundTransparency = 1
				Button1.Position = UDim2.new(1, -10, 0.5, 0)
				Button1.Size = UDim2.new(0, 20, 0, 20)
				Button1.ZIndex = 2
				Button1.Text = ""
				
				local Properties = {}
				
				Properties["Disabled"] = false
				Properties["Selected"] = nil
				Properties["Opened"] = false
				Properties["_coroutineFuncCall"] = true
				
				local LastValue2 = Properties.Opened
				
				local function OnPressedOrChange(arg1)
					if not Properties.Disabled or arg1 == "Override" then
						if Properties.Opened and not (arg1 == "Override") then
							
							local Tween
							local Tween2

							if arg1 == "Changed" then
								Tween = TS:Create(ImageLabel, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 90})
								Tween2 = TS:Create(ScrollingFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 4, 0), ScrollBarImageTransparency = 0})
							else
								Tween = TS:Create(ImageLabel, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 0})
								Tween2 = TS:Create(ScrollingFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, 0), ScrollBarImageTransparency = 1})
							end

							for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"]) do
								v:Pause()
								table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"], i)
							end

							for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"]) do
								v:Pause()
								table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"], i)
							end

							PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"][#PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"] + 1] = Tween
							PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"][#PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"] + 1] = Tween2

							Tween:Play()
							Tween2:Play()

							if arg1 ~= "Changed" then
								Properties.Opened = false
								LastValue2 = false
							end

							coroutine.wrap(function()
								wait(0.5)

								for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"]) do
									if v == Tween then
										table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"], i)
									end
								end

								for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"]) do
									if v == Tween2 then
										table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"], i)
									end
								end
							end)()
						else
							local Tween
							local Tween2

							if arg1 == "Changed" or arg1 == "Override" then
								Tween = TS:Create(ImageLabel, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 0})
								Tween2 = TS:Create(ScrollingFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, 0), ScrollBarImageTransparency = 1})
							else
								Tween = TS:Create(ImageLabel, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 90})
								Tween2 = TS:Create(ScrollingFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 4, 0), ScrollBarImageTransparency = 0})
							end

							for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"]) do
								v:Pause()
								table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"], i)
							end

							for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"]) do
								v:Pause()
								table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"], i)
							end

							PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"][#PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"] + 1] = Tween
							PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"][#PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"] + 1] = Tween2

							Tween:Play()
							Tween2:Play()

							if arg1 ~= "Changed" and arg1 ~= "Override" then
								Properties.Opened = true
								LastValue2 = true
							end

							coroutine.wrap(function()
								wait(0.5)

								for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"]) do
									if v == Tween then
										table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorArrowRotation"], i)
									end
								end

								for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"]) do
									if v == Tween2 then
										table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorSizeChange"], i)
									end
								end
							end)()
						end
					end
				end
				
				local function OnNewSelected()
					local Button = FindButtonByY(ScrollingFrame)
					
					if Button then
						local Text = Button.Text
						
						SelectedText.Text = Text
						Properties.Selected = Text
						
						if Properties._coroutineFuncCall then
							coroutine.wrap(FuncOnChoiced)(Text)
						else
							FuncOnChoiced(Text)
						end
					end
				end
				
				function Properties:Add(name)
					local BaseButton = Instance.new("TextButton", ScrollingFrame)
					BaseButton.AnchorPoint = Vector2.new(0.5, 0.5)
					BaseButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
					BaseButton.BorderColor3 = color1
					BaseButton.BorderSizePixel = 1
					BaseButton.BackgroundTransparency = 0.7
					BaseButton.Size = UDim2.new(1, 0, 0.25, 0)
					BaseButton.FontFace = Font.new("rbxasset://fonts/families/ComicNeueAngular.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
					BaseButton.TextColor3 = color2
					BaseButton.TextScaled = true
					BaseButton.TextXAlignment = Enum.TextXAlignment.Left
					BaseButton.Text = name
					BaseButton.Name = name
					BaseButton.ZIndex = 3
					
					local UITSC = Instance.new("UITextSizeConstraint", BaseButton)
					UITSC.MaxTextSize = 25
					UITSC.MinTextSize = 1
					
					BaseButton.MouseButton1Down:Connect(OnNewSelected)
				end
				
				function Properties:Remove(name)
					local Button = ScrollingFrame:FindFirstChild(name)
					
					if Button then
						Button:Destroy()
						if Properties.Selected == name then
							Properties.Selected = nil
							SelectedText.Text = "None"
							
							if Properties._coroutineFuncCall then
								coroutine.wrap(FuncOnChoiced)(nil)
							else
								FuncOnChoiced(nil)
							end
						end
					end
				end
				
				Button1.MouseButton1Down:Connect(OnPressedOrChange)
				
				coroutine.wrap(function()
					local LastValue = -1
					local LastValue3 = Properties.Disabled

					while game:GetService("RunService").RenderStepped:wait() do
						if LastValue ~= #ScrollingFrame:GetChildren() - 1 then
							LastValue = #ScrollingFrame:GetChildren() - 1

							if LastValue > 4 then
								ScrollingFrame.ScrollingEnabled = true
								ScrollingFrame.CanvasSize = UDim2.new(0, 0, LastValue, 0)
							else
								ScrollingFrame.ScrollingEnabled = false
								ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
							end
						end
						
						if LastValue2 ~= Properties.Opened then
							LastValue2 = Properties.Opened
							
							OnPressedOrChange("Changed")
						end
						
						if LastValue3 ~= Properties.Disabled then
							if Properties.Disabled == true then
								Button1.Active = false
								
								local Tween1, Tween2, Tween3, Tween4
								
								Tween1 = TS:Create(SelectedFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BorderColor3 = color4})
								Tween2 = TS:Create(ScrollingFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BorderColor3 = color4})
								Tween3 = TS:Create(ImageLabel, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = color4})
								Tween4 = TS:Create(SelectedText, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = color4})
								
								for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"]) do
									v:Pause()
									table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"], i)
								end
								
								PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"][#PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"] + 1] = Tween1
								PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"][#PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"] + 1] = Tween2
								PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"][#PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"] + 1] = Tween3
								PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"][#PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"] + 1] = Tween4

								Tween1:Play()
								Tween2:Play()
								Tween3:Play()
								Tween4:Play()

								coroutine.wrap(function()
									wait(0.5)

									for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"]) do
										if v == Tween1 or v == Tween2 or v == Tween3 or v == Tween4 then
											table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"], i)
										end
									end
								end)()
							else
								Button1.Active = true

								local Tween1, Tween2, Tween3, Tween4

								Tween1 = TS:Create(SelectedFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BorderColor3 = color1})
								Tween2 = TS:Create(ScrollingFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BorderColor3 = color1})
								Tween3 = TS:Create(ImageLabel, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = color2})
								Tween4 = TS:Create(SelectedText, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = color2})

								for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"]) do
									v:Pause()
									table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"], i)
								end

								PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"][#PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"] + 1] = Tween1
								PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"][#PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"] + 1] = Tween2
								PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"][#PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"] + 1] = Tween3
								PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"][#PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"] + 1] = Tween4

								Tween1:Play()
								Tween2:Play()
								Tween3:Play()
								Tween4:Play()

								coroutine.wrap(function()
									wait(0.5)

									for i, v in pairs(PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"]) do
										if v == Tween1 or v == Tween2 or v == Tween3 or v == Tween4 then
											table.remove(PlayingTweens["Selectors"][SelectorID]["SelectorColorChange"], i)
										end
									end
								end)()
							end
							
							LastValue3 = Properties.Disabled
							OnPressedOrChange("Override")
						end
					end
				end)()
				
				return Properties
			end

			return Functions
		end

		return Functions
	end

	return Functions
end

--[[

Instructions

to load with loadstring:
local new = loadstring(game:HttpGet("https://raw.githubusercontent.com/w1zlm/Guis/main/LaserGui") .. "return new")()

-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

new(MainColor (Color3), Saturation (Number), DisabledSaturation (Number)) - Creates menu, returns menu
MainColor - MainColor (Standartard is Color3.new(1, 0, 0))
Saturation - Saturation (Standartard is 1)
DisabledSaturation - Saturation that is applied for disabled buttons (Standartard is 1)

local menu = new(Color3.new(1, 0, 0), 1, 2)

-----------------------------------------------------------------------------------------------------------------

menu.NewSection("Section") -- Creates a section, returns section that you just created
the first argument is the text that will be displayed

local section1 = menu.NewSection("Section")

-----------------------------------------------------------------------------------------------------------------

section.NewTab("Tab") -- Creates a tab, returns tab
the first argument is the text that will be displayed

local tab = section.NewTab("Tab")

-----------------------------------------------------------------------------------------------------------------

tab.AddButton("Button", Function) -- Creates a button, returns button that you just created
the first argument is the text that will be displayed

"Function" is activated only when the button is pressed
No arguments are given for the function

local button = tab.AddButton("Button", function()
	print("Clicked")
end)

button properties:

Disabled (standart - false)
if its true, the button cannot be clicked

_coroutineFuncCall (standart - true)
if its true, the "Function" will be called using coroutine

-----------------------------------------------------------------------------------------------------------------

tab.AddSwitch("Switch", Function1, Function2) -- Creates a switch, returns switch that you just created
the first argument is the text that will be displayed

"Function1" is activated when switch turned off
No arguments are given for the function

"Function2" is activated when switch turned on
No arguments are given for the function

local switch = tab.AddSwitch("Switch", function()
	print("Off")
end, function()
	print("On")
end)

switch properties:

Toggled (standart - false)

AllowedToToggle (standart - true)
if its false, the switch cannot be turned on or off

_coroutineFuncCall (standart - true)
if its true, the "Function1" and "Function2" will be called using coroutine

_coroutineFuncOffCall (standart - true)
if its true, the "Function1" will be called using coroutine

_coroutineFuncOnCall (standart - true)
if its true, the "Function2" will be called using coroutine

-----------------------------------------------------------------------------------------------------------------

tab.AddSlider("Slider", Function) -- Creates a slider, returns slider that you just created
the first argument is the text that will be displayed

"Function" is activated on any movement of the slider
gives 1 argument: value

local slider = tab.AddSlider("Slider", function(value)
	print(value)
end)

switch properties:

MinValue - (standart - 0)
Minimum value

MaxValue - (standart - 100)
Maximum value

CanSlide - (standart - true)
if its false, the slider cannot be moved

Value - (standart - 0)

_coroutineFuncCall - (standart - true)
if its true, all "Function" will be called using coroutine

-----------------------------------------------------------------------------------------------------------------

tab.AddSelector("Selector", Function) -- Creates a selector, returns selector that you just created
the first argument is the text that will be displayed

"Function" is activated on any change of the selected value
gives 1 argument: text that player slected

! warning !
If the value got deleted using selector:Remove() then it is going to activate "Function" with first argument being nil!
! warning !

local selector = tab.AddSelector("Slider", function(text)
	print(text)
end)

Also it got a function:

selector:Add("Text") -- Adds a value that player can select to the selector
"Text" is the text that will be displayed

selector:Remove("Value text") -- Removes an already created value
"Value text" is the text that is displaying by value

selector properties:

Disabled - (standart - false)
if its true, the selected value cannot be changed

Selected - (standart - nil)
Value that is selected right now

Opened - (standart - false)
Is opened?

_coroutineFuncCall - (standart - true)
if its true, "Function" will be called using coroutine

]]

